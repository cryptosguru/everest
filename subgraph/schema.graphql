type Project @entity {
  id: ID!
  # From IPFS / off chain storage
  # None of these are required, since first the event DIDOwnerChanged creates the project first
  # Then DIDAttributeChanged gets emitted, where we will see theses values filled in
  # Note - someone could not upload any data here (blank IPFS file, or never calling 
  # DIDAttributeChanged). But this is okay, because that project should get challenged
  name: String
  description: String
  website: String
  twitter: String
  github: String # Make sure we call it github or something else
  avatar: String
  image: String
  categories: [Category!]
  isRepresentative: Boolean

  # From smart contracts directly
  owner: User
  isChallenged: Boolean!
  challenges: [Challenge!]
  # If now > memberShipStartTime , this project is a member. 
  # reputation = now - membershipStartTime. if negative, then reputation is just 0
  membershipStartTime: Int 
  delegates: [Bytes!] # Null if no delegate is set. There can be many delegates
  delegateValidities: [Int!] # Time delegate is valid
  ipfsHash: String # aka DIDAttribute



  # Derived from smart contract events
  totalVotes: Int!

  # All votes a Project has made
  votes: [Vote!] @derivedFrom(field: "voter")
}

type Category @entity {
  id: ID! # id is the name of the category
  description: String!
  slug: String!
  projects: [Project!] @derivedFrom(field: "categories") # TODO - ensure this works on the categories array
  subcategories: [Category!] @derivedFrom(field: "parentCategory")
  parentCategory: Category
}

type Challenge @entity {
  id: ID!
  description: String
  createdAt: Int!
  votesFor: Int!
  votesAgainst: Int!
  project: Project!
  owner: Bytes!
  resolved: Boolean! #  means it's a past challenge
  votes: [Vote!] @derivedFrom(field: "challenge")
}

# For global variables
type Everest @entity {
  id: ID!
  period: Int! # how long the challenge will last
  votingPeriodDuration: Int!
  whitelistPeriodDuration: Int!
  challengeDeposit: BigInt!
  applicationFee: BigInt!
  approvedToken: Bytes!
  reserveBank: Bytes!
  registry: Bytes!
}

type Vote @entity {
  id: ID! # concatenation of challenge ID and voter address
  voter: Project!
  challenge: Challenge!
  choice: Choice!
}

enum Choice {
  RemoveProject
  KeepProject
}

type User @entity {
  id: ID!
  name: String
  bio: String
  projects: [Project!]
  challenges: [Challenge!] # challenges you started
  votes: [Project!] # participation in other people's challenges
}