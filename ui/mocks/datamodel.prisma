type Project {
    id: ID! @id
    name: String!
    description: String!
    website: String
    blog: String
    socialFeed: String
    sourceCode: String
    categories: [String] @scalarList(strategy: RELATION)
    avatar: String
    ipfsHash: String

    owner: User
    isChallenged: Boolean
    challengeID: Int
    isWhitelistedMember: Boolean
    delegateAddress: String # Null if no delegate is set
    feePaid: Int # Will be the same for all, unless we allow it to be changed with upgradeabiltiy
    feeToken: String # Will be the same for all, unless we allow it to be changed with upgradeabiltiy

    # Derived from smart contract events
    totalVotes: Int
    reputation: Int

    # All votes a Project has made
    votes: [Vote] @derivedFrom(field: "projectID")
    createdAt: DateTime! @createdAt
}

type Challenge {
    id: ID! @id
    votesFor: Int
    votesAgainst: Int
    voteQuorum: Int
    challengeDeposit: Int
    challengeToken: String
    projectID: String
    owner: User
    resolved: Boolean
    votes: [Vote] @derivedFrom(field: "challengeID")
    createdAt: DateTime! @createdAt
}

type Vote {
    id: ID! @id # concatenation of challenge ID and voter address
    challengeID: String
    projectID: String
    choice: Choice
    createdAt: DateTime @createdAt
}

type User {
  id: ID! @id
  name: String!
  bio: String
  website: String
  social: String
  projects: [Project] @derivedFrom(field: "userID")
  challenges: [Challenge] @derivedFrom(field: "userID")
  createdAt: DateTime! @createdAt
}

enum Choice {
  RemoveProject
  KeepProject
}